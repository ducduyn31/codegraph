version: '3.8'

services:
  # API Gateway
  svc-gateway:
    build:
      context: ./svc-gateway
      dockerfile: Dockerfile
    container_name: svc-gateway
    depends_on:
      rabbitmq:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      PORT: 3000
      USER_SERVICE_URL: 'http://svc-user:3000'
      ORDER_SERVICE_URL: 'http://svc-order:3001'
      ACCOMMODATION_SERVICE_URL: 'http://svc-accommodation:3002'
      # Message Queue Configuration
      MESSAGE_QUEUE_PROVIDER: ${MESSAGE_QUEUE_PROVIDER:-rabbitmq}
      MESSAGE_QUEUE_URL: ${MESSAGE_QUEUE_URL:-amqp://guest:guest@rabbitmq:5672}
      MESSAGE_QUEUE_EXCHANGE: ${MESSAGE_QUEUE_EXCHANGE:-luxury_tours}
      # Legacy RabbitMQ config (for backward compatibility)
      RABBITMQ_URL: 'amqp://guest:guest@rabbitmq:5672'
      JWT_SECRET: 'luxury-tours-secret-key'
    ports:
      - "80:3000"  # Expose on port 80 for external access
    restart: unless-stopped

  # RabbitMQ for message queue
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"  # AMQP port
      - "15672:15672"  # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Zookeeper (required for Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log

  # Kafka for message queue (alternative to RabbitMQ)
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka-data:/var/lib/kafka/data

  # PostgreSQL for user service
  postgres-user:
    image: postgres:16-alpine
    container_name: postgres-user
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: userdb
    ports:
      - "5432:5432"
    volumes:
      - postgres-user-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # PostgreSQL for order service
  postgres-order:
    image: postgres:16-alpine
    container_name: postgres-order
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: orderdb
    ports:
      - "5433:5432"  # Map to different host port to avoid conflict
    volumes:
      - postgres-order-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # PostgreSQL for accommodation service
  postgres-accommodation:
    image: postgres:16-alpine
    container_name: postgres-accommodation
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: accommodationdb
    ports:
      - "5434:5432"  # Map to different host port to avoid conflict
    volumes:
      - postgres-accommodation-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # User service
  svc-user:
    build:
      context: ./svc-user
      dockerfile: Dockerfile
    container_name: svc-user
    depends_on:
      postgres-user:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      PORT: 3000
      DB_HOST: postgres-user
      DB_PORT: 5432
      DB_NAME: userdb
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_FORCE_SYNC: 'true'  # Set to 'false' in production
      # Message Queue Configuration
      MESSAGE_QUEUE_PROVIDER: ${MESSAGE_QUEUE_PROVIDER:-rabbitmq}
      MESSAGE_QUEUE_URL: ${MESSAGE_QUEUE_URL:-amqp://guest:guest@rabbitmq:5672}
      MESSAGE_QUEUE_EXCHANGE: ${MESSAGE_QUEUE_EXCHANGE:-luxury_tours}
      # Legacy RabbitMQ config (for backward compatibility)
      RABBITMQ_URL: 'amqp://guest:guest@rabbitmq:5672'
    ports:
      - "3000:3000"
    restart: unless-stopped

  # Order service
  svc-order:
    build:
      context: ./svc-order
      dockerfile: Dockerfile
    container_name: svc-order
    depends_on:
      postgres-order:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      PORT: 3001
      DB_HOST: postgres-order
      DB_PORT: 5432
      DB_NAME: orderdb
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_FORCE_SYNC: 'true'  # Set to 'false' in production
      # Message Queue Configuration
      MESSAGE_QUEUE_PROVIDER: ${MESSAGE_QUEUE_PROVIDER:-rabbitmq}
      MESSAGE_QUEUE_URL: ${MESSAGE_QUEUE_URL:-amqp://guest:guest@rabbitmq:5672}
      MESSAGE_QUEUE_EXCHANGE: ${MESSAGE_QUEUE_EXCHANGE:-luxury_tours}
      # Legacy RabbitMQ config (for backward compatibility)
      RABBITMQ_URL: 'amqp://guest:guest@rabbitmq:5672'
    ports:
      - "3001:3001"
    restart: unless-stopped

  # Accommodation service
  svc-accommodation:
    build:
      context: ./svc-accommodation
      dockerfile: Dockerfile
    container_name: svc-accommodation
    depends_on:
      postgres-accommodation:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      PORT: 3002
      DB_HOST: postgres-accommodation
      DB_PORT: 5432
      DB_NAME: accommodationdb
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_FORCE_SYNC: 'true'  # Set to 'false' in production
      # Message Queue Configuration
      MESSAGE_QUEUE_PROVIDER: ${MESSAGE_QUEUE_PROVIDER:-rabbitmq}
      MESSAGE_QUEUE_URL: ${MESSAGE_QUEUE_URL:-amqp://guest:guest@rabbitmq:5672}
      MESSAGE_QUEUE_EXCHANGE: ${MESSAGE_QUEUE_EXCHANGE:-luxury_tours}
      # Legacy RabbitMQ config (for backward compatibility)
      RABBITMQ_URL: 'amqp://guest:guest@rabbitmq:5672'
    ports:
      - "3002:3002"
    restart: unless-stopped

volumes:
  rabbitmq-data:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:
  postgres-user-data:
  postgres-order-data:
  postgres-accommodation-data: