version: '3.8'

services:
  # API Gateway
  svc-gateway:
    build:
      context: ./svc-gateway
      dockerfile: Dockerfile
    container_name: svc-gateway
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
    environment:
      PORT: 3000
      USER_SERVICE_URL: 'http://svc-user:3000'
      ORDER_SERVICE_URL: 'http://svc-order:3001'
      ACCOMMODATION_SERVICE_URL: 'http://svc-accommodation:3002'
      # Message Queue Configuration
      MESSAGE_QUEUE_PROVIDER: ${MESSAGE_QUEUE_PROVIDER:-kafka}
      MESSAGE_QUEUE_URL: ${MESSAGE_QUEUE_URL:-kafka1:9092,kafka2:9094,kafka3:9095}
      MESSAGE_QUEUE_EXCHANGE: ${MESSAGE_QUEUE_EXCHANGE:-luxury_tours}
      JWT_SECRET: 'luxury-tours-secret-key'
    ports:
      - "80:3000"  # Expose on port 80 for external access
    restart: unless-stopped

  # Kafka cluster using KRaft mode (no ZooKeeper)
  # Controller node (combined mode: controller + broker)
  kafka1:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka1
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:9093,2@kafka2:9093,3@kafka3:9093'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka1:9092,CONTROLLER://kafka1:9093,PLAINTEXT_HOST://0.0.0.0:29092'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka1:9092,PLAINTEXT_HOST://localhost:29092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
    volumes:
      - kafka1-data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Broker 2
  kafka2:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka2
    ports:
      - "9094:9094"
      - "29093:29093"
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:9093,2@kafka2:9093,3@kafka3:9093'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka2:9094,CONTROLLER://kafka2:9093,PLAINTEXT_HOST://0.0.0.0:29093'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka2:9094,PLAINTEXT_HOST://localhost:29093'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
    volumes:
      - kafka2-data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9094", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Broker 3
  kafka3:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka3
    ports:
      - "9095:9095"
      - "29094:29094"
    environment:
      KAFKA_NODE_ID: 3
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:9093,2@kafka2:9093,3@kafka3:9093'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka3:9095,CONTROLLER://kafka3:9093,PLAINTEXT_HOST://0.0.0.0:29094'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka3:9095,PLAINTEXT_HOST://localhost:29094'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
    volumes:
      - kafka3-data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9095", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5

  # AKHQ - Kafka UI for debugging
  akhq:
    image: tchiotludo/akhq:latest
    container_name: akhq
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-cluster:
              properties:
                bootstrap.servers: "kafka1:9092,kafka2:9094,kafka3:9095"
    ports:
      - "8080:8080"
    restart: unless-stopped

  # PostgreSQL for user service
  postgres-user:
    image: postgres:16-alpine
    container_name: postgres-user
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: userdb
    ports:
      - "5432:5432"
    volumes:
      - postgres-user-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # PostgreSQL for order service
  postgres-order:
    image: postgres:16-alpine
    container_name: postgres-order
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: orderdb
    ports:
      - "5433:5432"  # Map to different host port to avoid conflict
    volumes:
      - postgres-order-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # PostgreSQL for accommodation service
  postgres-accommodation:
    image: postgres:16-alpine
    container_name: postgres-accommodation
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: accommodationdb
    ports:
      - "5434:5432"  # Map to different host port to avoid conflict
    volumes:
      - postgres-accommodation-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # pgAdmin for database debugging
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    depends_on:
      - postgres-user
      - postgres-order
      - postgres-accommodation
    restart: unless-stopped

  # User service
  svc-user:
    build:
      context: ./svc-user
      dockerfile: Dockerfile
    container_name: svc-user
    depends_on:
      postgres-user:
        condition: service_healthy
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
    environment:
      PORT: 3000
      DB_HOST: postgres-user
      DB_PORT: 5432
      DB_NAME: userdb
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_FORCE_SYNC: 'true'  # Set to 'false' in production
      # Message Queue Configuration
      MESSAGE_QUEUE_PROVIDER: ${MESSAGE_QUEUE_PROVIDER:-kafka}
      MESSAGE_QUEUE_URL: ${MESSAGE_QUEUE_URL:-kafka1:9092,kafka2:9094,kafka3:9095}
      MESSAGE_QUEUE_EXCHANGE: ${MESSAGE_QUEUE_EXCHANGE:-luxury_tours}
    ports:
      - "3000:3000"
    restart: unless-stopped

  # Order service
  svc-order:
    build:
      context: ./svc-order
      dockerfile: Dockerfile
    container_name: svc-order
    depends_on:
      postgres-order:
        condition: service_healthy
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
    environment:
      PORT: 3001
      DB_HOST: postgres-order
      DB_PORT: 5432
      DB_NAME: orderdb
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_FORCE_SYNC: 'true'  # Set to 'false' in production
      # Message Queue Configuration
      MESSAGE_QUEUE_PROVIDER: ${MESSAGE_QUEUE_PROVIDER:-kafka}
      MESSAGE_QUEUE_URL: ${MESSAGE_QUEUE_URL:-kafka1:9092,kafka2:9094,kafka3:9095}
      MESSAGE_QUEUE_EXCHANGE: ${MESSAGE_QUEUE_EXCHANGE:-luxury_tours}
    ports:
      - "3001:3001"
    restart: unless-stopped

  # Accommodation service
  svc-accommodation:
    build:
      context: ./svc-accommodation
      dockerfile: Dockerfile
    container_name: svc-accommodation
    depends_on:
      postgres-accommodation:
        condition: service_healthy
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
    environment:
      PORT: 3002
      DB_HOST: postgres-accommodation
      DB_PORT: 5432
      DB_NAME: accommodationdb
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_FORCE_SYNC: 'true'  # Set to 'false' in production
      # Message Queue Configuration
      MESSAGE_QUEUE_PROVIDER: ${MESSAGE_QUEUE_PROVIDER:-kafka}
      MESSAGE_QUEUE_URL: ${MESSAGE_QUEUE_URL:-kafka1:9092,kafka2:9094,kafka3:9095}
      MESSAGE_QUEUE_EXCHANGE: ${MESSAGE_QUEUE_EXCHANGE:-luxury_tours}
    ports:
      - "3002:3002"
    restart: unless-stopped

volumes:
  kafka1-data:
  kafka2-data:
  kafka3-data:
  postgres-user-data:
  postgres-order-data:
  postgres-accommodation-data:
  pgadmin-data: